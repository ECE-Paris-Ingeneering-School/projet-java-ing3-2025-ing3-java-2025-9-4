package vue;

// Importation des classes n√©cessaires
import modele.Disponibilite;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.List;

public class PriseRendezVousVue extends JFrame {
    // Champs de texte pour les filtres de recherche
    private JTextField specialisationField;
    private JTextField villeField;
    private JTextField dateField;

    // Boutons pour rechercher et r√©server un cr√©neau
    private JButton rechercherButton;
    private JButton reserverButton;

    // Liste des disponibilit√©s √† afficher
    private DefaultListModel<Disponibilite> listeModel;
    private JList<Disponibilite> listeDispos;

    // Constructeur de la vue
    public PriseRendezVousVue() {
        setTitle("Prise de Rendez-vous");                         // Titre de la fen√™tre
        setSize(600, 500);                                        // Taille de la fen√™tre
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);        // Ferme uniquement cette fen√™tre sans quitter l'appli
        setLocationRelativeTo(null);                              // Centre la fen√™tre √† l'√©cran

        // üß© Cr√©ation du panneau de filtres pour la recherche
        JPanel filtresPanel = new JPanel(new GridLayout(4, 2));

        // Champ : sp√©cialisation
        filtresPanel.add(new JLabel("Sp√©cialisation :"));
        specialisationField = new JTextField();
        filtresPanel.add(specialisationField);

        // Champ : ville
        filtresPanel.add(new JLabel("Ville :"));
        villeField = new JTextField();
        filtresPanel.add(villeField);

        // Champ : date
        filtresPanel.add(new JLabel("Date (yyyy-mm-dd) :"));
        dateField = new JTextField();
        filtresPanel.add(dateField);

        // Boutons de recherche et de r√©servation
        rechercherButton = new JButton("Rechercher");
        reserverButton = new JButton("Prendre ce rendez-vous");
        filtresPanel.add(rechercherButton);
        filtresPanel.add(reserverButton);

        // üìú Liste des cr√©neaux disponibles (initialement vide)
        listeModel = new DefaultListModel<>();
        listeDispos = new JList<>(listeModel);
        listeDispos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION); // Une seule s√©lection possible
        JScrollPane scroll = new JScrollPane(listeDispos);                 // Ajout d‚Äôun ascenseur √† la liste

        // Mise en page de la fen√™tre
        setLayout(new BorderLayout());
        add(filtresPanel, BorderLayout.NORTH);   // Le haut de la fen√™tre contient les filtres
        add(scroll, BorderLayout.CENTER);        // Le centre contient la liste des cr√©neaux
    }

    // --- M√©thodes pour acc√©der aux champs de texte ---

    public String getSpecialisation() {
        return specialisationField.getText().trim();
    }

    public String getVille() {
        return villeField.getText().trim();
    }

    public String getDate() {
        return dateField.getText().trim();
    }

    // --- M√©thodes pour connecter les boutons √† des actions (listeners) ---

    public void setRechercherListener(ActionListener listener) {
        rechercherButton.addActionListener(listener);
    }

    public void setReserverListener(ActionListener listener) {
        reserverButton.addActionListener(listener);
    }

    // Affiche les r√©sultats de la recherche dans la liste
    public void afficherResultats(List<Disponibilite> disponibilites) {
        listeModel.clear(); // On vide d‚Äôabord la liste
        if (disponibilites.isEmpty()) {
            afficherMessage("Aucun cr√©neau trouv√©.");
        } else {
            for (Disponibilite d : disponibilites) {
                listeModel.addElement(d); // On ajoute chaque dispo dans la liste
            }
        }
    }

    // R√©cup√®re la disponibilit√© s√©lectionn√©e par l‚Äôutilisateur
    public Disponibilite getSelection() {
        return listeDispos.getSelectedValue();
    }

    // Affiche un message d'information
    public void afficherMessage(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    // Affiche un message d'erreur
    public void afficherErreur(String message) {
        JOptionPane.showMessageDialog(this, message, "Erreur", JOptionPane.ERROR_MESSAGE);
    }
}
